#lang racket
(define data '((1 "one")
               (2 "two")
               (3 "three")
               (4 "four")
               (5 "five")
               (6 "six")
               (7 "seven")
               (8 "eight")
               (9 "nine")
               (10 "ten")
               (11 "eleven")
               (12 "twelve")
               (13 "thirteen")
               (14 "fourteen")
               (15 "fifteen")
               (16 "sixteen")
               (17 "seventeen")
               (18 "eighteen")
               (19 "nineteen")
               (20 "twenty")
               (30 "thrity")
               (40 "fourty")
               (50 "fifty")
               (60 "sixty")
               (70 "seventy")
               (80 "eighty")
               (90 "ninety")
               (100 "hundred")
               (1000 "onethousand")
               ))
(define (getstring x) (first (dict-ref data x)))

(define (get x)
  (cond ((= x 1000) (getstring x))
        ((<= x 20) (getstring x))
        ((< x 100) (string-append (getstring (- x (modulo x 10))) (if (not (= (modulo x 10) 0)) (string-append "" (getstring (modulo x 10))) "")))
        ((= (modulo x 100) 0) (string-append (getstring (/ x 100)) "" (getstring 100)))
        (else (string-append (getstring (/ (- x (modulo x 100)) 100)) "" (getstring 100) "and" (get (modulo x 100))))))

(define (translate start end)
  (stream->list (stream-map get (in-range start end))))

(string-length (foldl string-append "" (translate 1 1001)))