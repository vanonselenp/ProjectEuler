#lang racket
;The sequence of triangle numbers is generated by adding the natural numbers. 
;So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
;1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
;Let us list the factors of the first seven triangle numbers:

 ;1: 1
 ;3: 1,3
 ;6: 1,2,3,6
;10: 1,2,5,10
;15: 1,3,5,15
;21: 1,3,7,21
;28: 1,2,4,7,14,28
;We can see that 28 is the first triangle number to have over five divisors.

;What is the value of the first triangle number to have over five hundred divisors?

(define (next-triangle value)
  (stream-fold + 0 (in-range 1 (+ 1 value))))

(define (divisors target)
  (define (det-sub counter)
    (define current-triangle (next-triangle counter))
    (define factors (find-factors current-triangle))
    (cond ((>= (stream-length factors) target) current-triangle)
          (else (det-sub (+ 1 counter))))) 
  (det-sub 1))

(define (find-factors value)
  (define (sub counter factors max-to-check)
    (cond ((> counter max-to-check) (remove-duplicates factors))
          ((= (modulo value counter) 0) (sub (+ counter 1) (append (append factors (list counter)) (list (/ value counter))) (/ value counter)))
          (else (sub (+ counter 1) factors max-to-check))))
  (sub 1 '() value))
          